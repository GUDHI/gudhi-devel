name: Test wheel

on: [push, pull_request]

jobs:
  test_wheels:
    name: Test wheel for cp${{ matrix.python }}-${{ matrix.platform_id }}-${{ matrix.manylinux_image }}
    runs-on: ${{ matrix.os }}
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        include:
          # Linux 64 bit manylinux2014
          - os: ubuntu-latest
            python: 310
            platform_id: manylinux_x86_64
            manylinux_image: gudhi/pip_for_gudhi:2025.04.01

          # # Linux 64 bit manylinux2014
          - os: ubuntu-24.04-arm
            python: 310
            platform_id: manylinux_aarch64
            manylinux_image: gudhi/pip_for_gudhi:2025.04.01

          # Window 64 bit
          - os: windows-latest
            python: 310
            platform_id: win_amd64

          # MacOS x86_64
          - os: macos-13
            python: 310
            platform_id: macosx_x86_64

    steps:
      - uses: actions/checkout@v4

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.2
        with:
          package-dir: src/python
        env:
          # Comment/uncomment to debug
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          # Skip 32-bit builds
          CIBW_SKIP: "*win32 *i686"
          # Do not install torch, tensorflow, eagerpy, pykeops, hnswlib
          CIBW_TEST_REQUIRES: pytest scipy matplotlib scikit-learn POT
          CIBW_TEST_COMMAND: "pytest {project}/src/python/test"
          # Linux specific
          CIBW_MANYLINUX_X86_64_IMAGE: gudhi/pip_for_gudhi:2025.04.01
          CIBW_MANYLINUX_AARCH64_IMAGE: gudhi/pip_for_gudhi:2025.04.01
          # CIBW_BEFORE_ALL_LINUX: bash {project}/scripts/cibuildwheel_before_all_linux.sh
          # OSx specific
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: delocate-listdeps --all {wheel} && delocate-wheel --require-archs universal2 -w {dest_dir} -v {wheel}
          CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET="10.13" _PYTHON_HOST_PLATFORM="macosx-13.0-universal2" ARCHFLAGS="-arch arm64 -arch x86_64"
          CIBW_BEFORE_ALL_MACOS: bash {project}/scripts/cibuildwheel_before_all_macos.sh
          # Windows specific
          SKBUILD_CMAKE_DEFINE: "VCPKG_TARGET_TRIPLET=x64-windows;CMAKE_TOOLCHAIN_FILE=c:/vcpkg/scripts/buildsystems/vcpkg.cmake"
          CIBW_BEFORE_ALL_WINDOWS: powershell.exe {project}/scripts/cibuildwheel_before_all_windows.ps1
          CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel"
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair --add-path C:\\vcpkg\\installed\\x64-windows\\bin -w {dest_dir} {wheel}"

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl
