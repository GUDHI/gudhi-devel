jobs:
  - job: "OSx"
    displayName: "Build and test OSx"
    timeoutInMinutes: 0
    cancelTimeoutInMinutes: 60
    pool:
      vmImage: macOS-13
    variables:
      pythonVersion: "3.9"
      cmakeBuildType: Release
      gudhiCmakeOptions: -DWITH_GUDHI_EXAMPLE=ON -DWITH_GUDHI_REMOTE_TEST=ON
      # On this VM, 2 versions of python are installed. Default Python_FIND_FRAMEWORK is FIRST, which means asks frameworks first
      # LAST means consult frameworks in last resort, use the PATH first
      extraCmakeOptions: -DPython_FIND_FRAMEWORK=LAST

    steps:
      - checkout: self
        submodules: true
      # Use a specific Python version
      - task: UsePythonVersion@0
        displayName: Use Python $(pythonVersion)
        inputs:
          versionSpec: $(pythonVersion)
          addToPath: true
          architecture: "x64"

      - bash: |
          git submodule update --init
          python -m pip install --user -r ext/gudhi-deploy/build-requirements.txt
          python -m pip install --user -r ext/gudhi-deploy/test-requirements.txt
          python -m pip uninstall -y pykeops
          if ! brew update; then
            echo "Warning: brew update returned a non-zero exit code."
          fi
          if ! brew install ninja graphviz doxygen boost eigen gmp mpfr tbb cgal; then
            echo "Warning: brew install returned a non-zero exit code."
          fi
        displayName: "Install build dependencies"
      - bash: |
          which python
          python -m pip install .
          cd build
          cmake -DCMAKE_BUILD_TYPE:STRING=$(cmakeBuildType) $(extraCmakeOptions) -GNinja $(gudhiCmakeOptions) ..
          ninja
          ninja doxygen

          ctest --output-on-failure
        displayName: "Build, test and documentation generation"

  - job: "Windows"
    displayName: "Build and test Windows"
    timeoutInMinutes: 0
    cancelTimeoutInMinutes: 60
    pool:
      vmImage: windows-latest
    variables:
      pythonVersion: "3.9"
      cmakeBuildType: Release
      cmakeVcpkgFlags: -DVCPKG_TARGET_TRIPLET=x64-windows -DCMAKE_TOOLCHAIN_FILE=c:\vcpkg\scripts\buildsystems\vcpkg.cmake
      # WITH_GUDHI_PYTHON=OFF on purpose. It is built and installed via pip
      gudhiCmakeOptions: -DWITH_GUDHI_EXAMPLE=ON -DWITH_GUDHI_TEST=ON -DWITH_GUDHI_UTILITIES=ON -DWITH_GUDHI_PYTHON=ON -DFORCE_EIGEN_DEFAULT_DENSE_INDEX_TYPE_TO_INT=ON
      # On this VM, 2 versions of python are installed. Default Python_FIND_REGISTRY is FIRST, which means asks registry first
      # LAST means consult registry in last resort, use the standard libraries or headers first
      extraCmakeOptions: -DPython_FIND_REGISTRY=LAST

    steps:
      - checkout: self
        submodules: true
      # Use a specific Python version
      - task: UsePythonVersion@0
        displayName: Use Python $(pythonVersion)
        inputs:
          versionSpec: $(pythonVersion)
          addToPath: true
          architecture: "x64"
      - powershell: |
          python --version
          python -m pip install -r ext/gudhi-deploy/build-requirements.txt
          python -m pip install --use-pep517 -r ext/gudhi-deploy/test-requirements.txt
          choco install -y ninja --force --force-dependencies
          # Only vcpkg release libs for CI
          Add-Content -Path "C:\vcpkg\triplets\x64-windows.cmake" -Value "set(VCPKG_BUILD_TYPE release)"
          vcpkg install boost-filesystem:x64-windows boost-test:x64-windows boost-program-options:x64-windows tbb:x64-windows eigen3:x64-windows cgal:x64-windows
        displayName: "Install build dependencies"
        errorActionPreference: "stop"
      - task: BatchScript@1
        inputs:
          filename: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat'
          modifyEnvironment: true
      - powershell: |
          mkdir build
          cd build
          python --version
          whoami -xzzyyzy
          cmake -DCMAKE_BUILD_TYPE:STRING=$(cmakeBuildType) -GNinja $(cmakeVcpkgFlags) $(gudhiCmakeOptions) $(extraCmakeOptions) --log-level=DEBUG ..
          ninja
          ctest --output-on-failure -C Release -E diff_files
        displayName: "Build and test"
        errorActionPreference: "stop"
