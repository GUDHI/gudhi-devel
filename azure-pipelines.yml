jobs:
  - job: "OSx"
    displayName: "Build and test OSx"
    timeoutInMinutes: 0
    cancelTimeoutInMinutes: 60
    pool:
      vmImage: macOS-13
    variables:
      pythonVersion: "3.9"
      cmakeBuildType: Release
      gudhiCmakeOptions: -DWITH_GUDHI_EXAMPLE=ON -DWITH_GUDHI_TEST=ON -DWITH_GUDHI_UTILITIES=ON -DWITH_GUDHI_PYTHON=ON -DWITH_GUDHI_REMOTE_TEST=ON
      # On this VM, 2 versions of python are installed. Default Python_FIND_FRAMEWORK is FIRST, which means asks frameworks first
      # LAST means consult frameworks in last resort, use the PATH first
      extraCmakeOptions: -DPython_FIND_FRAMEWORK=LAST

    steps:
      # Use a specific Python version
      - task: UsePythonVersion@0
        displayName: Use Python $(pythonVersion)
        inputs:
          versionSpec: $(pythonVersion)
          addToPath: true
          architecture: "x64"

      - bash: |
          git submodule update --init
          python -m pip install --user -r ext/gudhi-deploy/build-requirements.txt
          python -m pip install --user -r ext/gudhi-deploy/test-requirements.txt
          python -m pip uninstall -y pykeops
          brew update || true
          brew install ninja graphviz doxygen boost eigen gmp mpfr tbb cgal || true
        displayName: "Install build dependencies"
      - bash: |
          mkdir build
          cd build
          which python
          cmake -DCMAKE_BUILD_TYPE:STRING=$(cmakeBuildType) $(extraCmakeOptions) -GNinja $(gudhiCmakeOptions) ..
          ninja
          ninja doxygen
          ctest --output-on-failure
        displayName: "Build, test and documentation generation"

  - job: "Windows"
    displayName: "Build and test Windows"
    timeoutInMinutes: 0
    cancelTimeoutInMinutes: 60
    pool:
      vmImage: registry.gitlab.inria.fr/vrouvrea/play_with_ci/gudhi-windows-ci:latest
    variables:
      cmakeVcpkgFlags: -DVCPKG_TARGET_TRIPLET=x64-windows -DCMAKE_TOOLCHAIN_FILE=c:\vcpkg\scripts\buildsystems\vcpkg.cmake
      # WITH_GUDHI_PYTHON=OFF on purpose. It is set to ON on a second cmake call
      gudhiCmakeOptions: -DWITH_GUDHI_EXAMPLE=ON -DWITH_GUDHI_TEST=ON -DWITH_GUDHI_UTILITIES=ON -DWITH_GUDHI_PYTHON=OFF
      # On this VM, 2 versions of python are installed. Default Python_FIND_REGISTRY is FIRST, which means asks registry first
      # LAST means consult registry in last resort, use the standard libraries or headers first
      extraCmakeOptions: -DPython_FIND_REGISTRY=LAST

    steps:
      - script: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -G "Ninja" -DFORCE_EIGEN_DEFAUpytest
          pytest-cov
          sphinx
          sphinxcontrib-bibtex
          sphinx-paramlinks
          sphinx-autodoc-typehints
          pydata-sphinx-theme>=0.8.0
          matplotlib
          scipy>=1.6.0
          scikit-learn>=0.24.0
          pandas # Required by scikit-learn >= 1.5.0 for fetch_openml
          POT
          tensorflow
          tensorflow-addons
          torch
          pykeops
          hnswlib
          eagerpy
          networkxLT_DENSE_INDEX_TYPE_TO_INT=ON $(cmakeVcpkgFlags) $(gudhiCmakeOptions) ..
          IF %ERRORLEVEL% NEQ 0 EXIT 1
          ninja
          IF %ERRORLEVEL% NEQ 0 EXIT 1
          ctest --output-on-failure -C Release -E diff_files
          IF %ERRORLEVEL% NEQ 0 EXIT 1
          cmake $(extraCmakeOptions) -DWITH_GUDHI_PYTHON=ON -DWITH_GUDHI_REMOTE_TEST=ON .
          IF %ERRORLEVEL% NEQ 0 EXIT 1
          cd src\python
          copy "C:\vcpkg\installed\x64-windows\bin\mpfr*.dll" ".\gudhi\"
          IF %ERRORLEVEL% NEQ 0 EXIT 1
          copy "C:\vcpkg\installed\x64-windows\bin\gmp*.dll" ".\gudhi\"
          IF %ERRORLEVEL% NEQ 0 EXIT 1
          copy "C:\vcpkg\installed\x64-windows\bin\tbb*.dll" ".\gudhi\"
          IF %ERRORLEVEL% NEQ 0 EXIT 1
          python setup.py build_ext --inplace
          IF %ERRORLEVEL% NEQ 0 EXIT 1
          SET PYTHONPATH=%CD%;%PYTHONPATH%
          echo %PYTHONPATH%
          ctest --output-on-failure -C Release
          IF %ERRORLEVEL% NEQ 0 EXIT 1
        displayName: "Build and test"
